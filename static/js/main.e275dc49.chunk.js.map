{"version":3,"sources":["atoms.tsx","Component/ModalEdit.tsx","Component/Card.tsx","Component/Board.tsx","Component/ModalAllDelete.tsx","Component/DeleteBoard.tsx","App.tsx","theme.ts","index.tsx"],"names":["persistAtom","recoilPersist","key","storage","localStorage","toDoState","atom","default","effects_UNSTABLE","isDarkAtom","ModalWrapper","styled","div","_templateObject","_taggedTemplateLiteral","ModalContent","_templateObject2","props","theme","cardColor","Input","input","_templateObject3","boardColor","textColor","Button","button","_templateObject4","boardtextColor","ModalEdit","_ref","toDoText","toDoId","boardId","onClose","inputValue","setValue","useState","setTodos","useSetRecoilState","_jsx","_Fragment","children","onClick","e","stopPropagation","_jsxs","onSubmit","preventDefault","newTodos","trim","allBoards","updatedTodos","map","todo","id","text","type","value","onChange","currentTarget","CardTodos","isDragging","Card","index","isEditOpen","setisEditOpen","isIconVisible","setIsIconVisible","closeEdit","onClickEdit","Draggable","draggableId","toString","magic","info","ref","innerRef","draggableProps","dragHandleProps","FontAwesomeIcon","icon","faPenToSquare","Wrapper","Title","h2","Form","form","Area","isDraggingOver","isDraggingFromThis","_templateObject5","TitleForm","_templateObject6","StyledFontAwesomeIcon","_templateObject7","deleteBtn","Board","toDos","setToDos","register","handleSubmit","useForm","faMinus","onClickDeleteBoard","deletedBoard","rest","_ref2","toDo","newTodo","Date","now","isDelete","Object","keys","length","required","placeholder","concat","Droppable","droppableId","droppableProps","Boolean","draggingFromThisWith","ModalAllDelete","onConfirm","handleConfirm","Container","FontAwesomeIconStyled","FontAwesomeIconAllDelete","IconWrapper","trash","DeleteBoard","isClearOpen","setClearOpen","onClickClearAll","copyAllBoards","forEach","closeAllClear","onClickClearBtn","provided","faTrashCan","faBroom","CustomFontAwesomeIcon","toggle","Boards","FormInput","h1","App","useRecoilState","isToggled","setIsToggled","DragDropContext","onDragEnd","result","source","destination","allBoard","copySource","splice","console","log","sourceBoard","destinationBoard","taskObj","toggleTheme","prev","faToggleOn","faToggleOff","addToDo","React","memo","lightTheme","bgColor","darkTheme","GlobalStyle","createGlobalStyle","ThemedApp","isLight","useRecoilValue","ThemeProvider","ReactDOM","render","StrictMode","RecoilRoot","document","getElementById"],"mappings":"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","file":"static/js/main.e275dc49.chunk.js","sourcesContent":["import { atom } from 'recoil';\nimport { recoilPersist } from 'recoil-persist';\n\nexport interface ITodo {\n  id: number;\n  text: string;\n  isDelete: boolean;\n}\n\nexport interface ITodoState {\n  [key: string]: ITodo[];\n}\n\nconst { persistAtom } = recoilPersist({\n  key: 'todoPersist',\n  storage: localStorage,\n});\n\nexport const toDoState = atom<ITodoState>({\n  key: 'toDoState',\n  default: {},\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const isDarkAtom = atom<boolean>({\n  key: 'isDark',\n  default: true,\n});\n","import React, { useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport { toDoState } from '../atoms';\nimport styled from 'styled-components';\n\nconst ModalWrapper = styled.div`\n  position: fixed; /* 화면 고정 */\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.5); /* 배경 반투명 처리 */\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000; /* 다른 요소보다 위에 오도록 */\n`;\n\nconst ModalContent = styled.div`\n  background: ${(props) => props.theme.cardColor};\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n\nconst Input = styled.input`\n  border-style: none;\n  background-color: ${(props) => props.theme.cardColor};\n  border-bottom: 1px solid ${(props) => props.theme.boardColor};\n  color: ${(props) => props.theme.textColor};\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.theme.boardColor};\n  margin-left: 10px;\n  color: ${(props) => props.theme.boardtextColor};\n  border-radius: 20px;\n  border: 1px solid ${(props) => props.theme.boardColor};\n  font-size: 15px;\n`;\n\ninterface IModal {\n  toDoText: string;\n  toDoId: number;\n  boardId: string;\n  onClose: () => void;\n}\n\nconst ModalEdit = ({ toDoText, toDoId, boardId, onClose }: IModal) => {\n  const [inputValue, setValue] = useState(toDoText);\n  const setTodos = useSetRecoilState(toDoState);\n\n  const onChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value);\n  };\n\n  const onSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const newTodos = inputValue;\n    if (newTodos !== null && newTodos.trim() !== '') {\n      setTodos((allBoards) => {\n        const updatedTodos = allBoards[boardId].map((todo) =>\n          todo.id === toDoId ? { ...todo, text: newTodos } : todo\n        );\n\n        return {\n          ...allBoards,\n          [boardId]: updatedTodos,\n        };\n      });\n      onClose();\n      setValue('');\n    }\n  };\n\n  return (\n    <>\n      <ModalWrapper onClick={onClose}>\n        <ModalContent onClick={(e) => e.stopPropagation()}>\n          <form onSubmit={onSubmit}>\n            <Input type=\"text\" value={inputValue} onChange={onChange} />\n            <Button type=\"submit\">확인</Button>\n          </form>\n        </ModalContent>\n      </ModalWrapper>\n    </>\n  );\n};\n\nexport default ModalEdit;\n","import React, { useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPenToSquare } from '@fortawesome/free-solid-svg-icons';\nimport ModalEdit from './ModalEdit';\n\nconst CardTodos = styled.div<ICardTodosProps>`\n  display: flex;\n  justify-content: space-between;\n  background-color: ${(props) =>\n    props.isDragging ? '#B7B597' : props.theme.cardColor};\n  border-radius: 10px;\n  padding: 5px 10px;\n  margin-bottom: 5px;\n`;\n\ninterface ICardProps {\n  toDoId: number;\n  toDoText: string;\n  index: number;\n  boardId: string; // 보드 ID를 문자열로 변경\n}\n\ninterface ICardTodosProps {\n  isDragging: boolean;\n}\n\nconst Card = ({ toDoText, toDoId, index, boardId }: ICardProps) => {\n  const [isEditOpen, setisEditOpen] = useState(false);\n  const [isIconVisible, setIsIconVisible] = useState(true);\n\n  const openEdit = () => {\n    setisEditOpen(true);\n    setIsIconVisible(false);\n  };\n\n  const closeEdit = () => {\n    setisEditOpen(false);\n    setIsIconVisible(true);\n  };\n\n  const onClickEdit = (e: React.MouseEvent) => {\n    e.preventDefault();\n\n    openEdit();\n  };\n\n  return (\n    <Draggable key={toDoId} draggableId={toDoId.toString()} index={index}>\n      {(magic, info) => (\n        <CardTodos\n          ref={magic.innerRef}\n          {...magic.draggableProps}\n          {...magic.dragHandleProps}\n          isDragging={info.isDragging}\n        >\n          {toDoText}\n\n          {/* <FontAwesomeIcon onClick={onClickEdit} icon={faPenToSquare} /> */}\n          {isIconVisible && (\n            <FontAwesomeIcon icon={faPenToSquare} onClick={onClickEdit} />\n          )}\n          {isEditOpen && (\n            <ModalEdit\n              toDoText={toDoText}\n              toDoId={toDoId}\n              boardId={boardId}\n              onClose={closeEdit}\n            />\n          )}\n        </CardTodos>\n      )}\n    </Draggable>\n  );\n};\n\nexport default Card;\n","import { Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { toDoState } from '../atoms';\nimport Card from './Card';\nimport { useForm } from 'react-hook-form';\nimport { useSetRecoilState } from 'recoil';\nimport { ITodo } from '../atoms';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\n\nconst Wrapper = styled.div`\n  width: 300px;\n  padding-top: 10px;\n  margin: 20px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  font-family: 'Gowun Batang', serif;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n  margin-right: auto;\n  color: ${(props) => props.theme.boardtextColor};\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  input {\n    width: 100%;\n  }\n`;\n\ninterface IAreaProps {\n  isDraggingOver: boolean;\n  isDraggingFromThis: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n    props.isDraggingOver\n      ? 'rgba(126, 215, 193, 0.1)'\n      : props.isDraggingFromThis\n      ? 'rgba(126, 215, 193, 0.1)'\n      : 'transparent'};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Input = styled.input`\n  text-align: center;\n  border-style: none;\n  background-color: '#DC8686';\n\n  height: 30px;\n\n  width: 30px;\n  &:hover {\n    text-decoration: none;\n  }\n  &:focus {\n    outline: none;\n  }\n\n  &::placeholder {\n    font-family: 'Gowun Batang', serif;\n  }\n`;\n\nconst TitleForm = styled.div`\n  display: flex;\n  text-align: center;\n  justify-content: center;\n  flex-direction: row;\n  margin: 0px 10px;\n`;\n\nconst StyledFontAwesomeIcon = styled(FontAwesomeIcon)`\n  margin-left: auto;\n  color: ${(props) => props.theme.deleteBtn};\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\ninterface IBoardProps {\n  toDos: ITodo[];\n  boardId: string;\n}\n\ninterface IForm {\n  toDo: string;\n}\nconst Board = ({ boardId, toDos }: IBoardProps) => {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const onValid = ({ toDo }: IForm) => {\n    const newTodo = {\n      id: Date.now(),\n      text: toDo,\n      isDelete: false,\n    };\n\n    if (Object.keys(toDos).length >= 8) {\n      return;\n    }\n\n    setToDos((allBoards) => {\n      return {\n        ...allBoards,\n        [boardId]: [...allBoards[boardId], newTodo],\n      };\n    });\n    setValue('toDo', '');\n  };\n\n  const onClickDeleteBoard = () => {\n    setToDos((allBoards) => {\n      const { [boardId]: deletedBoard, ...rest } = allBoards;\n      return rest;\n    });\n  };\n  return (\n    <>\n      <Wrapper>\n        <TitleForm>\n          <Title>{boardId}</Title>\n          <StyledFontAwesomeIcon icon={faMinus} onClick={onClickDeleteBoard} />\n        </TitleForm>\n\n        <Form onSubmit={handleSubmit(onValid)}>\n          <Input\n            {...register('toDo', { required: true })}\n            type=\"text\"\n            placeholder={`Add task on ${boardId}`}\n          />\n        </Form>\n        <Droppable droppableId={boardId}>\n          {(magic, info) => (\n            <Area\n              ref={magic.innerRef}\n              {...magic.droppableProps}\n              isDraggingOver={info.isDraggingOver}\n              isDraggingFromThis={Boolean(info.draggingFromThisWith)}\n            >\n              {toDos.map((toDo, index) => (\n                <Card\n                  boardId={boardId}\n                  key={toDo.id}\n                  index={index}\n                  toDoText={toDo.text}\n                  toDoId={toDo.id}\n                ></Card>\n              ))}\n              {magic.placeholder}\n            </Area>\n          )}\n        </Droppable>\n      </Wrapper>\n    </>\n  );\n};\nexport default Board;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst ModalWrapper = styled.div`\n  position: fixed;\n  right: 20px;\n  bottom: 80px;\n  display: flex;\n  font-size: 20px;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n`;\n\nconst ModalContent = styled.div`\n  background: ${(props) => props.theme.cardColor};\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  min-width: 300px; /* 최소 너비 설정 */\n  min-height: 100px; /* 최소 높이 설정 */\n  text-align: center; /* 텍스트 중앙 정렬 */\n`;\n\nconst Button = styled.button`\n  background-color: ${(props) => props.theme.boardColor};\n  margin-left: 10px;\n  color: ${(props) => props.theme.boardtextColor};\n  border-radius: 20px;\n  border: 1px solid ${(props) => props.theme.boardColor};\n  font-size: 15px;\n  padding: 5px 10px;\n  margin-top: 10px;\n  cursor: pointer; /* 포인터 커서 추가 */\n`;\n\ninterface IModalProps {\n  onClose: () => void;\n  onConfirm: () => void;\n}\n\nconst ModalAllDelete = ({ onClose, onConfirm }: IModalProps) => {\n  const handleConfirm = () => {\n    onConfirm();\n    onClose(); // 모달 닫기\n  };\n\n  return (\n    <ModalWrapper onClick={onClose}>\n      <ModalContent onClick={(e) => e.stopPropagation()}>\n        <p>Are you sure you want to delete everything?</p>\n        <Button onClick={handleConfirm}>OK</Button>\n        <Button onClick={onClose}>Cancel</Button>\n      </ModalContent>\n    </ModalWrapper>\n  );\n};\n\nexport default ModalAllDelete;\n","import React, { useState } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashCan } from '@fortawesome/free-regular-svg-icons';\nimport { faBroom } from '@fortawesome/free-solid-svg-icons';\nimport { useSetRecoilState } from 'recoil';\nimport { toDoState } from '../atoms';\nimport ModalAllDelete from './ModalAllDelete';\n\nconst Container = styled.div`\n  width: 80px;\n  height: 80px;\n  position: fixed;\n  right: 10px;\n  bottom: 35px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst FontAwesomeIconStyled = styled(FontAwesomeIcon)`\n  margin-bottom: 10px;\n`;\n\nconst FontAwesomeIconAllDelete = styled(FontAwesomeIcon)`\n  cursor: pointer;\n  margin-bottom: 20px;\n\n  &:active {\n    font-size: 50px;\n  }\n`;\n\nconst IconWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-size: 60px;\n  color: ${(props) => props.theme.trash};\n  position: fixed;\n`;\n\nconst DeleteBoard = () => {\n  const [isClearOpen, setClearOpen] = useState(false);\n  const setTodos = useSetRecoilState(toDoState);\n\n  const onClickClearAll = () => {\n    setTodos((allBoards) => {\n      const copyAllBoards = { ...allBoards };\n      Object.keys(copyAllBoards).forEach((key) => delete copyAllBoards[key]);\n      return copyAllBoards;\n    });\n    setClearOpen(false); // 모달 닫기\n  };\n\n  const openAllClear = () => {\n    setClearOpen(true);\n  };\n\n  const closeAllClear = () => {\n    setClearOpen(false);\n  };\n\n  const onClickClearBtn = (e: React.MouseEvent) => {\n    e.preventDefault();\n    openAllClear();\n  };\n\n  return (\n    <Droppable droppableId=\"TRASH\">\n      {(provided) => (\n        <Container ref={provided.innerRef} {...provided.droppableProps}>\n          <IconWrapper>\n            <FontAwesomeIconStyled icon={faTrashCan} />\n            <FontAwesomeIconAllDelete\n              onClick={onClickClearBtn} // 모달 열기\n              icon={faBroom}\n            />\n            {isClearOpen && (\n              <ModalAllDelete\n                onClose={closeAllClear}\n                onConfirm={onClickClearAll}\n              />\n            )}\n          </IconWrapper>\n          {provided.placeholder}\n        </Container>\n      )}\n    </Droppable>\n  );\n};\n\nexport default DeleteBoard;\n","import React from 'react';\nimport { DragDropContext, DropResult } from 'react-beautiful-dnd';\nimport { useRecoilState } from 'recoil';\nimport styled from 'styled-components';\nimport { toDoState, isDarkAtom } from './atoms';\nimport Board from './Component/Board';\nimport { useForm } from 'react-hook-form';\nimport DeleteBoard from './Component/DeleteBoard';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faToggleOn, faToggleOff } from '@fortawesome/free-solid-svg-icons';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  width: 100vh;\n  position: relative;\n`;\n\nconst CustomFontAwesomeIcon = styled(FontAwesomeIcon)`\n  font-size: 50px;\n  cursor: pointer;\n  color: ${(props) => props.theme.toggle};\n  position: fixed;\n  margin: 0;\n`;\n\nconst Boards = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: flex-start;\n`;\n\nconst FormInput = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  margin-top: 100px;\n`;\n\nconst Title = styled.h1`\n  font-size: 50px;\n  text-align: center;\n  margin-bottom: 10px;\n  color: ${(props) => props.theme.textColor};\n  font-family: 'Playwrite AU VIC', cursive;\n`;\n\nconst Input = styled.input`\n  width: 500px;\n  height: 32px;\n  font-size: 15px;\n  border: 0;\n  border-radius: 15px;\n  outline: none;\n  padding-left: 10px;\n  background-color: rgb(233, 233, 233);\n\n  &::placeholder {\n    font-family: 'Gowun Batang', serif;\n  }\n`;\n\ninterface IForm {\n  addToDo: string;\n}\n\nconst App = () => {\n  const [toDos, setTodos] = useRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const [isToggled, setIsToggled] = useRecoilState(isDarkAtom);\n\n  const toggleTheme = () => {\n    setIsToggled((prev) => !prev);\n  };\n\n  const onValid = ({ addToDo }: IForm) => {\n    if (Object.keys(toDos).length >= 3) {\n      return;\n    }\n    setTodos((allBoards) => {\n      return {\n        ...allBoards,\n        [addToDo]: [],\n      };\n    });\n    setValue('addToDo', '');\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    if (!destination) {\n      console.log('보드 밖으로 떨어짐');\n      return;\n    }\n\n    if (destination.droppableId === 'TRASH') {\n      setTodos((allBoard) => {\n        const copySource = [...allBoard[source.droppableId]];\n        copySource.splice(source.index, 1);\n\n        return {\n          ...allBoard,\n          [source.droppableId]: copySource,\n        };\n      });\n      console.log('Trash로 이동함');\n      return;\n    }\n\n    setTodos((allBoard) => {\n      const sourceBoard = [...allBoard[source.droppableId]];\n      const destinationBoard = [...allBoard[destination.droppableId]];\n\n      if (source.droppableId === destination.droppableId) {\n        const taskObj = sourceBoard[source.index];\n\n        sourceBoard.splice(source.index, 1);\n        sourceBoard.splice(destination.index, 0, taskObj);\n\n        return {\n          ...allBoard,\n          [source.droppableId]: sourceBoard,\n        };\n      } else {\n        const taskObj = sourceBoard[source.index];\n\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination.index, 0, taskObj);\n\n        return {\n          ...allBoard,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      }\n    });\n    console.log('보드 이동 완료');\n  };\n\n  return (\n    <>\n      <DragDropContext onDragEnd={onDragEnd}>\n        <CustomFontAwesomeIcon\n          onClick={toggleTheme}\n          icon={isToggled ? faToggleOn : faToggleOff}\n        />\n        <Wrapper>\n          <FormInput>\n            <Title>What To Do Today?</Title>\n            <form onSubmit={handleSubmit(onValid)}>\n              <Input\n                {...register('addToDo', {\n                  required: true,\n                })}\n                placeholder=\"Create New Board\"\n              />\n            </form>\n          </FormInput>\n\n          <Boards>\n            {Object.keys(toDos).map((boardId) => (\n              <Board key={boardId} boardId={boardId} toDos={toDos[boardId]} />\n            ))}\n          </Boards>\n          <DeleteBoard />\n        </Wrapper>\n      </DragDropContext>\n    </>\n  );\n};\n\nexport default React.memo(App);\n","import { DefaultTheme } from 'styled-components';\n\nexport const lightTheme: DefaultTheme = {\n  bgColor: '#F1E5D1',\n  boardColor: '#254336',\n  cardColor: '#FEFEDF',\n  textColor: '#254336',\n  boardtextColor: 'white',\n  deleteBtn: 'white',\n  toggle: '#254336',\n  trash: '#254336',\n};\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: '#254336',\n  boardColor: '#F1E5D1',\n  cardColor: '#6B8A7A',\n  textColor: '#F1E5D1',\n  boardtextColor: 'black',\n  deleteBtn: '#254336',\n  toggle: 'white',\n  trash: '#F1E5D1',\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { RecoilRoot, useRecoilValue } from 'recoil'; // useRecoilValue 추가\nimport { darkTheme, lightTheme } from './theme';\nimport { ThemeProvider } from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\nimport { isDarkAtom } from './atoms';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Gowun+Batang&display=swap');\n  @import url('https://fonts.googleapis.com/css2?family=Playwrite+AU+VIC:wght@100..400&display=swap');\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, menu, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed,\n  figure, figcaption, footer, header, hgroup,\n  main, menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure,\n  footer, header, hgroup, main, menu, nav, section {\n    display: block;\n  }\n  /* HTML5 hidden-attribute fix for newer browsers */\n  *[hidden] {\n      display: none;\n  }\n  body {\n    line-height: 1;\n  }\n  menu, ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n  * {\n    box-sizing: border-box;\n  }\n  body {\n    font-weight: 300;\n    font-family: \"Playwrite AU VIC\", cursive, \"Gowun Batang\", serif;\n    background-color: ${(props) => props.theme.bgColor};\n    color: ${(props) => props.theme.textColor};\n    line-height: 1.2;\n  }\n  a {\n    text-decoration: none;\n    color: inherit;\n  }\n`;\n\nconst ThemedApp = () => {\n  const isLight = useRecoilValue(isDarkAtom);\n\n  return (\n    <ThemeProvider theme={isLight ? lightTheme : darkTheme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemedApp />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}